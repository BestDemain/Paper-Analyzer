{
  "标题": "[章节内容长度: 40字符。Denoising Diffusion Probabilistic Models]",
  "摘要": "[章节内容长度: 765字符。We present high quality image synthesis results using diffusion probabilistic models,\na class of latent variable models inspired by considerations from nonequilibrium\nthermodynamics. Our best results are obtained by training on a weighted variational\nbound designed according to a novel connection between diffusion probabilistic\nmodels and denoising score matching with Langevin dynamics, and our models nat-\nurally admit a progressive lossy decompression scheme that can be interpreted as a\ngeneralization of autoregressive decoding. On the unconditional CIFAR10 dataset,\nwe obtain an Inception score of 9.46 and a state-of-the-art FID score of 3.17. On\n256x256 LSUN, we obtain sample quality similar to ProgressiveGAN. Our imple-\nmentation is available at{v0}.\n1]",
  "第1章 Introduction": "[章节内容长度: 2972字符。Introduction\nDeep generative models of all kinds have recently exhibited high quality samples in a wide variety\nof data modalities. Generative adversarial networks (GANs), autoregressive models, ﬂows, and\nvariational autoencoders (VAEs) have synthesized striking image and audio samples [14,{v1},{v2},\n58,{v3},{v4},{v5},{v6},{v7},{v8},{v9},{v10},{v11}], and there have been remarkable advances in energy-based\nmodeling and score matching that have produced images comparable to those of GANs [11, 55].\nFigure 1:{v12}\n34th Conference on Neural Information Processing Systems (NeurIPS 2020), Vancouver, Canada.\narXiv:2006.11239v2  [cs.LG]  16 Dec 2020\n\n\n{v13}\n{v14}\n{v15}\n{v16}\n{v17}1{v18}0\n{v19}({v20}1{v21})\n{v22}({v23}1)\nFigure 2:{v24}\nThis paper presents progress in diffusion probabilistic models [53]. A diffusion probabilistic model\n(which we will call a “diffusion model” for brevity) is a parameterized Markov chain trained using\nvariational inference to produce samples matching the data after ﬁnite time. Transitions of this chain\nare learned to reverse a diffusion process, which is a Markov chain that gradually adds noise to the\ndata in the opposite direction of sampling until signal is destroyed. When the diffusion consists of\nsmall amounts of Gaussian noise, it is sufﬁcient to set the sampling chain transitions to conditional\nGaussians too, allowing for a particularly simple neural network parameterization.\nDiffusion models are straightforward to deﬁne and efﬁcient to train, but to the best of our knowledge,\nthere has been no demonstration that they are capable of generating high quality samples. We\nshow that diffusion models actually are capable of generating high quality samples, sometimes\nbetter than the published results on other types of generative models (Section 4). In addition, we\nshow that a certain parameterization of diffusion models reveals an equivalence with denoising\nscore matching over multiple noise levels during training and with annealed Langevin dynamics\nduring sampling (Section 3.2) [55,{v25}]. We obtained our best sample quality results using this\nparameterization (Section 4.2), so we consider this equivalence to be one of our primary contributions.\nDespite their sample quality, our models do not have competitive log likelihoods compared to other\nlikelihood-based models (our models do, however, have log likelihoods better than the large estimates\nannealed importance sampling has been reported to produce for energy based models and score\nmatching [11,{v26}]). We ﬁnd that the majority of our models’ lossless codelengths are consumed\nto describe imperceptible image details (Section 4.3). We present a more reﬁned analysis of this\nphenomenon in the language of lossy compression, and we show that the sampling procedure of\ndiffusion models is a type of progressive decoding that resembles autoregressive decoding along a bit\nordering that vastly generalizes what is normally possible with autoregressive models.]",
  "第2章 Background": "[章节内容长度: 2542字符。Background\nDiffusion models [53] are latent variable models of the form{v27}({v28}0{v29}\n{v30}\n{v31}({v32}0:{v33}1:{v34}\n{v35}1{v36}0{v37}({v38}0). The joint distribution\n{v39}({v40}0:{v41}, and it is deﬁned as a Markov chain with learned Gaussian\ntransitions starting at{v42}({v43}({v44}):\n{v45}({v46}0:{v47}({v48}\n{v49}\n{v50}\n{v51}\n{v52}({v53}1{v54}){v55}\n{v56}({v57}1{v58}({v59}1;{v60}({v61}){v62}({v63}))\n(1)\nWhat distinguishes diffusion models from other types of latent variable models is that the approximate\nposterior{v64}({v65}1:{v66}0), called the{v67}, is ﬁxed to a Markov chain that\ngradually adds Gaussian noise to the data according to a variance schedule{v68}1{v69}\n{v70}({v71}1:{v72}0{v73}\n{v74}\n{v75}\n{v76}\n{v77}({v78}1){v79}\n{v80}({v81}1{v82}({v83};\n{v84}\n1{v85}1{v86})\n(2)\nTraining is performed by optimizing the usual variational bound on negative log likelihood:\n{v87}log{v88}({v89}0)]{v90}\n{v91}\n{v92}log{v93}({v94}0:{v95}\n{v96}({v97}1:{v98}0)\n{v99}\n{v100}\n{v101}\n{v102}log{v103}({v104}\n{v105}\n{v106}1\nlog{v107}({v108}1{v109})\n{v110}({v111}1)\n{v112}\n{v113}\nThe forward process variances{v114}33] or held constant as\nhyperparameters, and expressiveness of the reverse process is ensured in part by the choice of\nGaussian conditionals in{v115}({v116}1{v117}), because both processes have the same functional form when\n{v118}53]. A notable property of the forward process is that it admits sampling{v119}\narbitrary timestep{v120}\n{v121}, we have\n{v122}({v123}0{v124}({v125};{v126}0{v127}){v128})\n(4)\n2\n\n\nEfﬁcient training is therefore possible by optimizing random terms of{v129}\ndescent. Further improvements come from variance reduction by rewriting{v130}\n{v131}\n{v132}\n{v133}KL({v134}({v135}0){v136}({v137} ))\n{v138}\n{v139}\n{v140}\n{v141}\n{v142}\n{v143}\n{v144}1\n{v145}KL({v146}({v147}1{v148}0){v149}({v150}1{v151}))\n{v152}\n{v153}\n{v154}\n{v155}1\n{v156}log{v157}({v158}0{v159}1)\n{v160}\n{v161}\n{v162}\n{v163}0\n{v164}\n(5)\n(See Appendix A for details. The labels on the terms are used in Section 3.) Equation (5) uses KL\ndivergence to directly compare{v165}({v166}1{v167}){v168}\nwhen conditioned on{v169}0:\n{v170}({v171}1{v172}0{v173}({v174}1{v175}({v176}0){v177} {v178}){v179}\n(6)\nwhere\n{v180}({v181}0{v182}\n{v183}1{v184}\n1{v185}\n{v186}0{v187}\n{v188}(1{v189}1)\n1{v190}\n{v191}\nand\n{v192} 1{v193}1\n1{v194}\n{v195}\n(7)\nConsequently, all KL divergences in Eq. (5) are comparisons between Gaussians, so they can be\ncalculated in a Rao-Blackwellized fashion with closed form expressions instead of high variance\nMonte Carlo estimates.]",
  "第3章 Diffusion models and denoising autoencoders": "[章节内容长度: 8363字符。Diffusion models and denoising autoencoders\nDiffusion models might appear to be a restricted class of latent variable models, but they allow a\nlarge number of degrees of freedom in implementation. One must choose the variances{v196}\nforward process and the model architecture and Gaussian distribution parameterization of the reverse\nprocess. To guide our choices, we establish a new explicit connection between diffusion models\nand denoising score matching (Section 3.2) that leads to a simpliﬁed, weighted variational bound\nobjective for diffusion models (Section 3.4). Ultimately, our model design is justiﬁed by simplicity\nand empirical results (Section 4). Our discussion is categorized by the terms of Eq. (5).\n3.1\nForward process and{v197}\nWe ignore the fact that the forward process variances{v198}\ninstead ﬁx them to constants (see Section 4 for details). Thus, in our implementation, the approximate\nposterior{v199}\n3.2\nReverse process and{v200}1:{v201}1\nNow we discuss our choices in{v202}({v203}1{v204}({v205}1;{v206}({v207}){v208}({v209})){v210}. First,\nwe set{v211}({v212}2\n{v213}2\n{v214} {v215} and\n{v216}2\n{v217} {v218} {v219} 1{v220}1\n1{v221}0{v222}({v223}), and the\nsecond is optimal for{v224}0{v225}\ncorresponding to upper and lower bounds on reverse process entropy for data with coordinatewise\nunit variance [53].\nSecond, to represent the mean{v226}({v227}), we propose a speciﬁc parameterization motivated by the\nfollowing analysis of{v228}. With{v229}({v230}1{v231}({v232}1;{v233}({v234}){v235}2\n{v236}), we can write:\n{v237}1{v238}\n{v239}\n2{v240}2\n{v241}\n{v242}({v243}0){v244}({v245}){v246}2\n{v247}\n{v248}\n(8)\nwhere{v249}. So, we see that the most straightforward parameteri-\nzation of{v250}, the forward process posterior mean. However, we can expand\nEq. (8) further by reparameterizing Eq. (4) as{v251}({v252}0{v253}0{v254}1{v255}({v256}){v257}\napplying the forward process posterior formula (7):\n{v258}1{v259}0{v260}\n{v261}\n1\n2{v262}2\n{v263}\n{v264}\n{v265}\n{v266}({v267}0{v268}){v269}\n1\n{v270}\n({v271}({v272}0{v273}){v274}\n{v275}\n1{v276})\n{v277}\n{v278}({v279}({v280}0{v281}){v282})\n{v283}\n2{v284}\n(9)\n{v285}0{v286}\n{v287}\n1\n2{v288}2\n{v289}\n{v290}\n1\n{v291}\n{v292}\n{v293}({v294}0{v295}){v296}\n{v297}\n{v298}1{v299}\n{v300}\n{v301}\n{v302}({v303}({v304}0{v305}){v306})\n{v307}\n2{v308}\n(10)\n3\n\n\nAlgorithm 1{v309}\n1:{v310}\n2:\n{v311}0{v312}({v313}0)\n3:\n{v314}Uniform({v315}1{v316})\n4:\n{v317}({v318})\n5:\nTake gradient descent step on\n{v319}\n{v320}({v321}0{v322}1{v323})\n{v324}2\n6:{v325}\nAlgorithm 2{v326}\n1:{v327}({v328})\n2:{v329}\n3:\n{v330}({v331}){v332}, else{v333}\n4:\n{v334}1{v335}\n1\n{v336}\n{v337}\n{v338}\n1{v339}\n{v340}1{v341}({v342})\n{v343}\n{v344}\n5:{v345}\n6:{v346}0\nEquation (10) reveals that{v347}\n1\n{v348}\n{v349}\n{v350}\n{v351}\n{v352}1{v353}\n{v354}\ngiven{v355}. Since{v356}\ninput to the model, we may choose the parameterization\n{v357}({v358}\n{v359}\n{v360}\n1\n{v361}\n({v362}\n{v363}\n1{v364}({v365}))\n{v366}\n{v367}\n1\n{v368}\n{v369}\n{v370}\n{v371}\n{v372}1{v373}\n{v374}({v375})\n{v376}\n(11)\nwhere{v377}. To sample{v378}1{v379}({v380}1{v381}){v382}\nto compute{v383}1{v384}\n1\n{v385}\n{v386}\n{v387}\n{v388}\n{v389}1{v390}({v391})\n{v392}\n{v393}, where{v394}({v395}). The complete sampling\nprocedure, Algorithm 2, resembles Langevin dynamics with{v396}\ndensity. Furthermore, with the parameterization (11), Eq. (10) simpliﬁes to:\n{v397}0{v398}\n{v399}\n{v400}2\n{v401}\n2{v402}2\n{v403}(1{v404})\n{v405}({v406}0{v407}\n{v408}\n1{v409})\n{v410}2{v411}\n(12)\nwhich resembles denoising score matching over multiple noise scales indexed by{v412}55]. As Eq. (12)\nis equal to (one term of) the variational bound for the Langevin-like reverse process (11), we see\nthat optimizing an objective resembling denoising score matching is equivalent to using variational\ninference to ﬁt the ﬁnite-time marginal of a sampling chain resembling Langevin dynamics.\nTo summarize, we can train the reverse process mean function approximator{v413}, or by\nmodifying its parameterization, we can train it to predict{v414}. (There is also the possibility of predicting\n{v415}0, but we found this to lead to worse sample quality early in our experiments.) We have shown that\nthe{v416}-prediction parameterization both resembles Langevin dynamics and simpliﬁes the diffusion\nmodel’s variational bound to an objective that resembles denoising score matching. Nonetheless,\nit is just another parameterization of{v417}({v418}1{v419}), so we verify its effectiveness in Section 4 in an\nablation where we compare predicting{v420}.\n3.3\nData scaling, reverse process decoder, and{v421}0\nWe assume that image data consists of integers in{v422}0{v423}1{v424}. This\nensures that the neural network reverse process operates on consistently scaled inputs starting from\nthe standard normal prior{v425}({v426}. To obtain discrete log likelihoods, we set the last term of the reverse\nprocess to an independent discrete decoder derived from the Gaussian{v427}({v428}0;{v429}({v430}1{v431}2\n1{v432}):\n{v433}({v434}0{v435}1{v436}\n{v437}\n{v438}\n{v439}\n{v440}({v441}\n0)\n{v442}({v443}\n0)\n{v444}({v445};{v446}\n{v447}({v448}1{v449}2\n1){v450}\n{v451}({v452}\n{v453}\nif{v454}\n{v455}\n1\n255\nif{v456}\n{v457}({v458}\n{v459}\nif{v460}1\n{v461}\n1\n255\nif{v462}1\n(13)\nwhere{v463}\n(It would be straightforward to instead incorporate a more powerful decoder like a conditional\nautoregressive model, but we leave that to future work.) Similar to the discretized continuous\ndistributions used in VAE decoders and autoregressive models [34,{v464}], our choice here ensures that\nthe variational bound is a lossless codelength of discrete data, without need of adding noise to the\ndata or incorporating the Jacobian of the scaling operation into the log likelihood. At the end of\nsampling, we display{v465}({v466}1{v467}\n3.4\nSimpliﬁed training objective\nWith the reverse process and decoder deﬁned above, the variational bound, consisting of terms derived\nfrom Eqs. (12) and (13), is clearly differentiable with respect to{v468}\n4\n\n\nTable 1:{v469}\nModel\nIS\nFID\nNLL Test (Train)\nConditional\nEBM [11]\n8{v470}30\n37{v471}9\nJEM [17]\n8{v472}76\n38{v473}4\nBigGAN [3]\n9{v474}22\n14{v475}73\n{v476}\n{v477}\n{v478}\nUnconditional\nDiffusion (original) [53]\n{v479}5{v480}40\nGated PixelCNN [59]\n4{v481}60\n65{v482}93\n3{v483}03 (2{v484}90)\nSparse Transformer [7]\n{v485}\nPixelIQN [43]\n5{v486}29\n49{v487}46\nEBM [11]\n6{v488}78\n38{v489}2\nNCSNv2 [56]\n31{v490}75\nNCSN [55]\n8{v491}87{v492}0{v493}12\n25{v494}32\nSNGAN [39]\n8{v495}22{v496}0{v497}05\n21{v498}7\nSNGAN-DDLS [4]\n9{v499}09{v500}0{v501}10\n15{v502}42\n{v503}\n{v504}05\n3{v505}26\nOurs ({v506}, ﬁxed isotropic{v507})\n7{v508}67{v509}0{v510}13\n13{v511}51\n{v512}3{v513}70 (3{v514}69)\nOurs ({v515}simple)\n9{v516}46{v517}0{v518}11\n{v519}\n{v520}3{v521}75 (3{v522}72)\nTable 2:{v523}\nprocess parameterization and training objec-\ntive ablation. Blank entries were unstable to\ntrain and generated poor samples with out-of-\nrange scores.\nObjective\nIS\nFID\n{v524}\n{v525}, learned diagonal{v526}\n7{v527}28{v528}0{v529}10\n23{v530}69\n{v531}, ﬁxed isotropic{v532}\n8{v533}06{v534}0{v535}09\n13{v536}22\n{v537}2\n–\n–\n{v538}\n{v539}, learned diagonal{v540}\n–\n–\n{v541}, ﬁxed isotropic{v542}\n7{v543}67{v544}0{v545}13\n13{v546}51\n{v547}2 ({v548}simple)\n{v549}\n{v550}\ntraining. However, we found it beneﬁcial to sample quality (and simpler to implement) to train on the\nfollowing variant of the variational bound:\n{v551}simple({v552}0{v553}\n{v554}({v555}0{v556}\n{v557}\n1{v558})\n{v559}2{v560}\n(14)\nwhere{v561}. The{v562}0{v563}\ndiscrete decoder deﬁnition (13) approximated by the Gaussian probability density function times the\nbin width, ignoring{v564}2\n1 and edge effects. The{v565}\nEq. (12), analogous to the loss weighting used by the NCSN denoising score matching model [55].\n({v566}\ncomplete training procedure with this simpliﬁed objective.\nSince our simpliﬁed objective (14) discards the weighting in Eq. (12), it is a weighted variational\nbound that emphasizes different aspects of reconstruction compared to the standard variational\nbound [18,{v567}]. In particular, our diffusion process setup in Section 4 causes the simpliﬁed objective\nto down-weight loss terms corresponding to small{v568}. These terms train the network to denoise data\nwith very small amounts of noise, so it is beneﬁcial to down-weight them so that the network can\nfocus on more difﬁcult denoising tasks at larger{v569}\nreweighting leads to better sample quality.]",
  "第4章 Experiments": "[章节内容长度: 7395字符。Experiments\nWe set{v570}\nduring sampling matches previous work [53,{v571}]. We set the forward process variances to constants\nincreasing linearly from{v572}1{v573}4 to{v574}02. These constants were chosen to be small\nrelative to data scaled to{v575}1{v576}, ensuring that reverse and forward processes have approximately\nthe same functional form while keeping the signal-to-noise ratio at{v577}\n{v578}KL({v579}({v580}0){v581}({v582})){v583}10{v584}5 bits per dimension in our experiments).\nTo represent the reverse process, we use a U-Net backbone similar to an unmasked{v585}52,\n48] with group normalization throughout [66]. Parameters are shared across time, which is speciﬁed\nto the network using the Transformer sinusoidal position embedding [60]. We use self-attention at\nthe{v586}\n4.1\nSample quality\nTable 1 shows Inception scores, FID scores, and negative log likelihoods (lossless codelengths) on\nCIFAR10. With our FID score of 3.17, our unconditional model achieves better sample quality than\nmost models in the literature, including class conditional models. Our FID score is computed with\nrespect to the training set, as is standard practice; when we compute it with respect to the test set, the\nscore is 5.24, which is still better than many of the training set FID scores in the literature.\n5\n\n\nFigure 3:{v587}7{v588}89\nFigure 4:{v589}4{v590}90\nAlgorithm 3{v591}0\n1: Send{v592}({v593}0){v594}({v595}\n2:{v596}1{v597}\n3:\nSend{v598}({v599}0){v600}({v601})\n4:{v602}\n5: Send{v603}0{v604}({v605}0{v606}1)\nAlgorithm 4{v607}\n1: Receive{v608}({v609}\n2:{v610}1{v611}\n3:\nReceive{v612}({v613})\n4:{v614}\n5:{v615}0\nWe ﬁnd that training our models on the true variational bound yields better codelengths than training\non the simpliﬁed objective, as expected, but the latter yields the best sample quality. See Fig. 1 for\nCIFAR10 and CelebA-HQ{v616}71],\nand Appendix D for more.\n4.2\nReverse process parameterization and training objective ablation\nIn Table 2, we show the sample quality effects of reverse process parameterizations and training\nobjectives (Section 3.2). We ﬁnd that the baseline option of predicting{v617}\ntrained on the true variational bound instead of unweighted mean squared error, a simpliﬁed objective\nakin to Eq. (14). We also see that learning reverse process variances (by incorporating a parameterized\ndiagonal{v618}({v619}){v620}\ncompared to ﬁxed variances. Predicting{v621}, as we proposed, performs approximately as well as\npredicting{v622}\nwith our simpliﬁed objective.\n4.3\nProgressive coding\nTable 1 also shows the codelengths of our CIFAR10 models. The gap between train and test is at\nmost 0.03 bits per dimension, which is comparable to the gaps reported with other likelihood-based\nmodels and indicates that our diffusion model is not overﬁtting (see Appendix D for nearest neighbor\nvisualizations). Still, while our lossless codelengths are better than the large estimates reported for\nenergy based models and score matching using annealed importance sampling [11], they are not\ncompetitive with other types of likelihood-based generative models [7].\nSince our samples are nonetheless of high quality, we conclude that diffusion models have an inductive\nbias that makes them excellent lossy compressors. Treating the variational bound terms{v623}1{v624}\nas rate and{v625}0{v626}\nbits/dim and a distortion of{v627}\nscale from 0 to 255. More than half of the lossless codelength describes imperceptible distortions.\nProgressive lossy compression\nWe can probe further into the rate-distortion behavior of our model\nby introducing a progressive lossy code that mirrors the form of Eq. (5): see Algorithms 3 and 4,\nwhich assume access to a procedure, such as minimal random coding [19,{v628}], that can transmit a\nsample{v629}({v630}){v631}KL({v632}({v633}){v634}({v635})){v636}\n{v637}, for which only{v638}0{v639}({v640}0), Algorithms 3\nand 4 transmit{v641}0{v642}\n6\n\n\nat any time{v643}, has the partial information{v644}\n{v645}0{v646}0{v647}\n{v648}\n{v649}\n{v650}\n1{v651}({v652})\n{v653}\n{v654}\n(15)\ndue to Eq. (4). (A stochastic reconstruction{v655}0{v656}({v657}0{v658}){v659}\nit here because it makes distortion more difﬁcult to evaluate.) Figure 5 shows the resulting rate-\ndistortion plot on the CIFAR10 test set. At each time{v660}, the distortion is calculated as the root mean\nsquared error\n{v661}\n{v662}0{v663}0{v664}2{v665}, and the rate is calculated as the cumulative number of bits received\nso far at time{v666}. The distortion decreases steeply in the low-rate region of the rate-distortion plot,\nindicating that the majority of the bits are indeed allocated to imperceptible distortions.\n0\n200\n400\n600\n800 1{v667}000\n0\n20\n40\n60\n80\nReverse process steps ({v668})\nDistortion (RMSE)\n0\n200\n400\n600\n800 1{v669}000\n0\n0{v670}5\n1\n1{v671}5\nReverse process steps ({v672})\nRate (bits/dim)\n0\n0{v673}5\n1\n1{v674}5\n0\n20\n40\n60\n80\nRate (bits/dim)\nDistortion (RMSE)\nFigure 5:{v675}\nerror on a{v676}\nProgressive generation\nWe also run a progressive unconditional generation process given by\nprogressive decompression from random bits. In other words, we predict the result of the reverse\nprocess,{v677}0, while sampling from the reverse process using Algorithm 2. Figures 6 and 10 show the\nresulting sample quality of{v678}0{v679}\nappear ﬁrst and details appear last. Figure 7 shows stochastic predictions{v680}0{v681}({v682}0{v683}){v684}\nfrozen for various{v685}. When{v686}\nscale features are preserved. Perhaps these are hints of conceptual compression [18].\nFigure 6:{v687}0{v688}\nand sample quality metrics over time in the appendix (Figs. 10 and 14).\nFigure 7:{v689}\nBottom-right quadrants are{v690}, and other quadrants are samples from{v691}({v692}0{v693}).\nConnection to autoregressive decoding\nNote that the variational bound (5) can be rewritten as:\n{v694}KL({v695}({v696}({v697}\n{v698}\n{v699}1\n{v700}KL({v701}({v702}1{v703}){v704}({v705}1{v706}))\n{v707}\n{v708}({v709}0)\n(16)\n(See Appendix A for a derivation.) Now consider setting the diffusion process length{v710}\ndimensionality of the data, deﬁning the forward process so that{v711}({v712}0){v713}\non{v714}0{v715}({v716}1){v717}th coordinate), setting\n{v718}({v719}({v720}1{v721}){v722}\n7\n\n\nFigure 8:{v723}\nbe a fully expressive conditional distribution. With these choices,{v724}KL({v725}({v726}({v727}, and\nminimizing{v728}KL({v729}({v730}1{v731}){v732}({v733}1{v734})){v735}\nand to predict the{v736}th coordinate given{v737}. Thus, training{v738}\ntraining an autoregressive model.\nWe can therefore interpret the Gaussian diffusion model (2) as a kind of autoregressive model with\na generalized bit ordering that cannot be expressed by reordering data coordinates. Prior work has\nshown that such reorderings introduce inductive biases that have an impact on sample quality [38],\nso we speculate that the Gaussian diffusion serves a similar purpose, perhaps to greater effect since\nGaussian noise might be more natural to add to images compared to masking noise. Moreover, the\nGaussian diffusion length is not restricted to equal the data dimension; for instance, we use{v739},\nwhich is less than the dimension of the{v740}\nGaussian diffusions can be made shorter for fast sampling or longer for model expressiveness.\n4.4\nInterpolation\nWe can interpolate source images{v741}0{v742}\n0{v743}({v744}0){v745}\n{v746}\n{v747}({v748}0), then decoding the linearly interpolated latent{v749} {v750}){v751}0 {v752}]",
  "第5章 into image": "[章节内容长度: 585字符。space by the reverse process,{v753}0{v754}({v755}0{v756}). In effect, we use the reverse process to remove\nartifacts from linearly interpolating corrupted versions of the source images, as depicted in Fig. 8\n(left). We ﬁxed the noise for different values of{v757}\n{v758} remain the same. Fig. 8 (right)\nshows interpolations and reconstructions of original CelebA-HQ{v759}). The\nreverse process produces high-quality reconstructions, and plausible interpolations that smoothly\nvary attributes such as pose, skin tone, hairstyle, expression and background, but not eyewear. Larger\n{v760}]",
  "第6章 Related Work": "[章节内容长度: 1680字符。Related Work\nWhile diffusion models might resemble ﬂows [9,{v761},{v762},{v763},{v764},{v765},{v766}] and VAEs [33,{v767},{v768}],\ndiffusion models are designed so that{v769}\nmutual information with the data{v770}0. Our{v771}-prediction reverse process parameterization establishes a\nconnection between diffusion models and denoising score matching over multiple noise levels with\nannealed Langevin dynamics for sampling [55,{v772}]. Diffusion models, however, admit straightforward\nlog likelihood evaluation, and the training procedure explicitly trains the Langevin dynamics sampler\nusing variational inference (see Appendix C for details). The connection also has the reverse\nimplication that a certain weighted form of denoising score matching is the same as variational\ninference to train a Langevin-like sampler. Other methods for learning transition operators of Markov\nchains include infusion training [2], variational walkback [15], generative stochastic networks [1],\nand others [50, 54, 36, 42, 35, 65].\nBy the known connection between score matching and energy-based modeling, our work could have\nimplications for other recent work on energy-based models [67–69,{v773},{v774},{v775},{v776},{v777},{v778},{v779}]. Our\nrate-distortion curves are computed over time in one evaluation of the variational bound, reminiscent\nof how rate-distortion curves can be computed over distortion penalties in one run of annealed\nimportance sampling [24]. Our progressive decoding argument can be seen in convolutional DRAW\nand related models [18,{v780}] and may also lead to more general designs for subscale orderings or\nsampling strategies for autoregressive models [38, 64].\n8\n\n\n6]",
  "第7章 Conclusion": "[章节内容长度: 2617字符。We have presented high quality image samples using diffusion models, and we have found connections\namong diffusion models and variational inference for training Markov chains, denoising score\nmatching and annealed Langevin dynamics (and energy-based models by extension), autoregressive\nmodels, and progressive lossy compression. Since diffusion models seem to have excellent inductive\nbiases for image data, we look forward to investigating their utility in other data modalities and as\ncomponents in other types of generative models and machine learning systems.\nBroader Impact\nOur work on diffusion models takes on a similar scope as existing work on other types of deep\ngenerative models, such as efforts to improve the sample quality of GANs, ﬂows, autoregressive\nmodels, and so forth. Our paper represents progress in making diffusion models a generally useful\ntool in this family of techniques, so it may serve to amplify any impacts that generative models have\nhad (and will have) on the broader world.\nUnfortunately, there are numerous well-known malicious uses of generative models. Sample gen-\neration techniques can be employed to produce fake images and videos of high proﬁle ﬁgures for\npolitical purposes. While fake images were manually created long before software tools were avail-\nable, generative models such as ours make the process easier. Fortunately, CNN-generated images\ncurrently have subtle ﬂaws that allow detection [62], but improvements in generative models may\nmake this more difﬁcult. Generative models also reﬂect the biases in the datasets on which they\nare trained. As many large datasets are collected from the internet by automated systems, it can be\ndifﬁcult to remove these biases, especially when the images are unlabeled. If samples from generative\nmodels trained on these datasets proliferate throughout the internet, then these biases will only be\nreinforced further.\nOn the other hand, diffusion models may be useful for data compression, which, as data becomes\nhigher resolution and as global internet trafﬁc increases, might be crucial to ensure accessibility of\nthe internet to wide audiences. Our work might contribute to representation learning on unlabeled\nraw data for a large range of downstream tasks, from image classiﬁcation to reinforcement learning,\nand diffusion models might also become viable for creative uses in art, photography, and music.\nAcknowledgments and Disclosure of Funding\nThis work was supported by ONR PECASE and the NSF Graduate Research Fellowship under grant\nnumber DGE-1752814. Google’s TensorFlow Research Cloud (TFRC) provided Cloud TPUs.]",
  "第8章 References": "[章节内容长度: 5134字符。[1]{v781}\nPascal Vincent. GSNs: generative stochastic networks.{v782},\n5(2):210–249, 2016.\n[2]{v783}\ntraining. In{v784}, 2017.\n[3]{v785}\nimage synthesis. In{v786}, 2019.\n[4] Tong Che, Ruixiang Zhang, Jascha Sohl-Dickstein, Hugo Larochelle, Liam Paull, Yuan Cao, and Yoshua\nBengio. Your GAN is secretly an energy-based model and you should use discriminator driven latent\nsampling.{v787}, 2020.\n[5]{v788}\nequations. In{v789}, pages 6571–6583, 2018.\n[6]{v790}\nsive generative model. In{v791}, pages 863–871, 2018.\n[7]{v792}\ntransformers.{v793}, 2019.\n9\n\n\n[8]{v794}\nmodels for text generation.{v795}, 2020.\n[9]{v796}\n{v797}, 2014.\n[10]{v798}\n{v799}, 2016.\n[11]{v800}\n{v801}, pages 3603–3613, 2019.\n[12]{v802}\nvia multi-grid modeling and sampling. In{v803}\n{v804}, pages 9155–9164, 2018.\n[13]{v805}\ncontrastive estimation of energy-based models. In{v806}\n{v807}, pages 7518–7528, 2020.\n[14]{v808}\nCourville, and Yoshua Bengio. Generative adversarial nets. In{v809}\n{v810}, pages 2672–2680, 2014.\n[15]{v811}\ntransition operator as a stochastic recurrent net. In{v812},\npages 4392–4402, 2017.\n[16]{v813}\nFFJORD: Free-form\ncontinuous dynamics for scalable reversible generative models. In{v814}\n{v815}, 2019.\n[17]{v816}\nKevin Swersky. Your classiﬁer is secretly an energy based model and you should treat it like one. In\n{v817}, 2020.\n[18]{v818}\nconceptual compression. In{v819}, pages 3549–3557, 2016.\n[19]{v820}\ncomplexity of correlation. In{v821}\n{v822}, pages 10–23. IEEE, 2007.\n[20]{v823}\nGetting bits back from compressed model parameters. In{v824}\n{v825}, 2019.\n[21]{v826}\ntrained by a two time-scale update rule converge to a local Nash equilibrium. In{v827}\n{v828}, pages 6626–6637, 2017.\n[22]{v829}\nhamed, and Alexander Lerchner. beta-VAE: Learning basic visual concepts with a constrained variational\nframework. In{v830}, 2017.\n[23]{v831}\ngenerative models with variational dequantization and architecture design. In{v832}\n{v833}, 2019.\n[24]{v834}\ndeep generative models. In{v835}, 2020.\n[25]{v836}\nKoray Kavukcuoglu. Video pixel networks. In{v837}, pages\n1771–1779, 2017.\n[26]{v838}\nFlorian Stimberg, Aaron van den Oord, Sander Dieleman, and Koray Kavukcuoglu. Efﬁcient neural audio\nsynthesis. In{v839}, pages 2410–2419, 2018.\n[27]{v840}\nquality, stability, and variation. In{v841}, 2018.\n[28]{v842}\nnetworks. In{v843}, pages\n10\n\n\n4401–4410, 2019.\n[29]{v844}\ngenerative adversarial networks with limited data.{v845}, 2020.\n[30]{v846}\nimproving the image quality of StyleGAN. In{v847}\n{v848}, pages 8110–8119, 2020.\n[31]{v849}\n{v850}, 2015.\n[32]{v851}\n{v852}, pages 10215–10224, 2018.\n[33]{v853},\n2013.\n[34]{v854}\nvariational inference with inverse autoregressive ﬂow. In{v855}\n{v856}, pages 4743–4751, 2016.\n[35]{v857}\nsampler-induced distributions. In{v858}, pages 8501–8513,\n2019.\n[36]{v859}\nneural networks. In{v860}, 2018.\n[37]{v861}\nlatent variables for generative modeling. In{v862}, pages\n6548–6558, 2019.\n[38]{v863}\nmultidimensional upscaling. In{v864}, 2019.\n[39]{v865}\ngenerative adversarial networks. In{v866}, 2018.\n[40] Alex Nichol. VQ-DRAW: A sequential discrete VAE.{v867}, 2020.\n[41]{v868}\nmaximum likelihood learning of energy-based models.{v869}, 2019.\n[42]{v870}\nshort-run MCMC toward energy-based model. In{v871},\npages 5233–5243, 2019.\n[43]{v872}\nIn{v873}, pages 3936–3945, 2018.\n[44]{v874}\nspeech synthesis. In{v875}\n{v876}, pages 3617–3621. IEEE, 2019.\n[45]{v877}\nVAE-2. In{v878}, pages 14837–14847, 2019.\n[46]{v879}\n{v880}, pages 1530–1538, 2015.\n[47]{v881}\nimate inference in deep generative models. In{v882}, pages\n1278–1286, 2014.\n[48]{v883}\nimage segmentation. In{v884}\n{v885}, pages 234–241. Springer, 2015.\n[49]{v886}\ntraining of deep neural networks. In{v887}, pages 901–909,\n2016.\n[50]{v888}\nBridging the gap. In{v889}, pages 1218–1226, 2015.\n11\n\n\n[51]{v890}\ntechniques for training gans. In{v891}, pages 2234–2242,\n2016.\n[52]{v892}\nwith discretized logistic mixture likelihood and other modiﬁcations. In{v893}\n{v894}, 2017.\n[53]{v895}\nlearning using nonequilibrium thermodynamics. In{v896}, pages\n2256–2265, 2015.\n[54]{v897}\n{v898}, pages 5140–5150, 2017.\n[55]{v899}\n{v900}, pages 11895–11907, 2019.\n[56]{v901}\n{v902}, 2020.\n[57]{v903}\nKalchbrenner, Andrew Senior, and Koray Kavukcuoglu. WaveNet: A generative model for raw audio.\n{v904}, 2016.\n[58]{v905}\n{v906}, 2016.\n[59]{v907}\nKavukcuoglu. Conditional image generation with PixelCNN decoders. In{v908}\n{v909}, pages 4790–4798, 2016.\n[60]{v910}\nKaiser, and Illia Polosukhin. Attention is all you need. In{v911}\n{v912}, pages 5998–6008, 2017.\n[61]{v913},\n23(7):1661–1674, 2011.\n[62]{v914}\nare surprisingly easy to spot...for now. In{v915}\n{v916}, 2020.\n[63]{v917}\n{v918}, pages 7794–7803,\n2018.\n[64]{v919}\n{v920}, 2020.\n[65]{v921},\n2020.\n[66]{v922}\n{v923}, pages 3–19, 2018.\n[67]{v924}\n{v925}, pages 2635–2644, 2016.\n[68]{v926}\ngenerative convnet. In{v927},\npages 7093–7101, 2017.\n[69]{v928}\ndescriptor networks for 3d shape synthesis and analysis. In{v929}\n{v930}, pages 8629–8638, 2018.\n[70]{v931}\nconvnets for dynamic patterns.{v932}, 2019.\n[71]{v933}\nimage dataset using deep learning with humans in the loop.{v934}, 2015.\n[72]{v935},\n2016.]",
  "第9章 Extra information": "[章节内容长度: 8685字符。Extra information\nLSUN\nFID scores for LSUN datasets are included in Table 3. Scores marked with{v936}are reported\nby StyleGAN2 as baselines, and other scores are reported by their respective authors.\nTable 3: FID scores for LSUN{v937}\nModel\nLSUN Bedroom\nLSUN Church\nLSUN Cat\nProgressiveGAN [27]\n8.34\n6.42\n37.52\nStyleGAN [28]\n2.65\n4.21{v938}\n8.53{v939}\nStyleGAN2 [30]\n-\n3.86\n6.93\nOurs ({v940}simple)\n6.36\n7.89\n19.75\nOurs ({v941}simple, large)\n4.90\n-\n-\nProgressive compression\nOur lossy compression argument in Section 4.3 is only a proof of concept,\nbecause Algorithms 3 and 4 depend on a procedure such as minimal random coding [20], which is\nnot tractable for high dimensional data. These algorithms serve as a compression interpretation of the\nvariational bound (5) of Sohl-Dickstein et al. [53], not yet as a practical compression system.\nTable 4: Unconditional CIFAR10 test set rate-distortion values (accompanies Fig. 5)\nReverse process time ({v942})\nRate (bits/dim)\nDistortion (RMSE{v943})\n1000\n1.77581\n0.95136\n900\n0.11994\n12.02277\n800\n0.05415\n18.47482\n700\n0.02866\n24.43656\n600\n0.01507\n30.80948\n500\n0.00716\n38.03236\n400\n0.00282\n46.12765\n300\n0.00081\n54.18826\n200\n0.00013\n60.97170\n100\n0.00000\n67.60125\nA\nExtended derivations\nBelow is a derivation of Eq. (5), the reduced variance variational bound for diffusion models. This\nmaterial is from Sohl-Dickstein et al. [53]; we include it here only for completeness.\n{v944}\n{v945}\n{v946}log{v947}({v948}0:{v949}\n{v950}({v951}1:{v952}0)\n{v953}\n(17)\n{v954}\n{v955}\n{v956}log{v957}({v958}\n{v959}\n{v960}1\nlog{v961}({v962}1{v963})\n{v964}({v965}1)\n{v966}\n{v967}\n(18)\n{v968}\n{v969}\n{v970}log{v971}({v972}\n{v973}\n{v974}1\nlog{v975}({v976}1{v977})\n{v978}({v979}1){v980}log{v981}({v982}0{v983}1)\n{v984}({v985}1{v986}0)\n{v987}\n(19)\n{v988}\n{v989}\n{v990}log{v991}({v992}\n{v993}\n{v994}1\nlog\n{v995}({v996}1{v997})\n{v998}({v999}1{v1000}0){v1001}({v1002}1{v1003}0)\n{v1004}({v1005}0)\n{v1006}log{v1007}({v1008}0{v1009}1)\n{v1010}({v1011}1{v1012}0)\n{v1013}\n(20)\n{v1014}\n{v1015}\n{v1016}log\n{v1017}({v1018}\n{v1019}({v1020}0){v1021}\n{v1022}\n{v1023}1\nlog\n{v1024}({v1025}1{v1026})\n{v1027}({v1028}1{v1029}0){v1030}log{v1031}({v1032}0{v1033}1)\n{v1034}\n(21)\n13\n\n\n{v1035}\n{v1036}\n{v1037}KL({v1038}({v1039}0){v1040}({v1041}\n{v1042}\n{v1043}1\n{v1044}KL({v1045}({v1046}1{v1047}0){v1048}({v1049}1{v1050})){v1051}log{v1052}({v1053}0{v1054}1)\n{v1055}\n(22)\nThe following is an alternate version of{v1056}. It is not tractable to estimate, but it is useful for our\ndiscussion in Section 4.3.\n{v1057}\n{v1058}\n{v1059}log{v1060}({v1061}\n{v1062}\n{v1063}1\nlog{v1064}({v1065}1{v1066})\n{v1067}({v1068}1)\n{v1069}\n{v1070}\n(23)\n{v1071}\n{v1072}\n{v1073}log{v1074}({v1075}\n{v1076}\n{v1077}1\nlog{v1078}({v1079}1{v1080})\n{v1081}({v1082}1{v1083}){v1084}({v1085}1)\n{v1086}({v1087})\n{v1088}\n{v1089}\n(24)\n{v1090}\n{v1091}\n{v1092}log{v1093}({v1094}\n{v1095}({v1096}\n{v1097}\n{v1098}1\nlog{v1099}({v1100}1{v1101})\n{v1102}({v1103}1{v1104}){v1105}log{v1106}({v1107}0)\n{v1108}\n{v1109}\n(25)\n{v1110}KL({v1111}({v1112}({v1113}\n{v1114}\n{v1115}\n{v1116}1\n{v1117}KL({v1118}({v1119}1{v1120}){v1121}({v1122}1{v1123}))\n{v1124}\n{v1125}({v1126}0)\n(26)\nB\nExperimental details\n{v1127}52], which is a U-Net [48]\nbased on a Wide ResNet [72]. We replaced weight normalization [49] with group normalization [66]\nto make the implementation simpler. Our{v1128}32{v1129}\nto{v1130}), and our{v1131}\nper resolution level and self-attention blocks at the{v1132}\nblocks [6]. Diffusion time{v1133}60]\ninto each residual block. Our CIFAR10 model has 35.7 million parameters, and our LSUN and\nCelebA-HQ models have 114 million parameters. We also trained a larger variant of the LSUN\nBedroom model with approximately 256 million parameters by increasing ﬁlter count.\nWe used TPU v3-8 (similar to 8 V100 GPUs) for all experiments. Our CIFAR model trains at 21\nsteps per second at batch size 128 (10.6 hours to train to completion at 800k steps), and sampling\na batch of 256 images takes 17 seconds. Our CelebA-HQ/LSUN (2562) models train at 2.2 steps\nper second at batch size 64, and sampling a batch of 128 images takes 300 seconds. We trained on\nCelebA-HQ for 0.5M steps, LSUN Bedroom for 2.4M steps, LSUN Cat for 1.8M steps, and LSUN\nChurch for 1.2M steps. The larger LSUN Bedroom model was trained for 1.15M steps.\nApart from an initial choice of hyperparameters early on to make network size ﬁt within memory\nconstraints, we performed the majority of our hyperparameter search to optimize for CIFAR10 sample\nquality, then transferred the resulting settings over to the other datasets:\n•{v1134}\nconstrained so that{v1135}0. We set{v1136}\nschedule from{v1137}1{v1138}4 to{v1139}02.\n•{v1140}1{v1141}0{v1142}1{v1143}2{v1144}3{v1145}4{v1146}.\nWithout dropout on CIFAR10, we obtained poorer samples reminiscent of the overﬁtting\n{v1147}52]. We set dropout rate on the other datasets to\nzero without sweeping.\n•{v1148}\nand without ﬂips, and found ﬂips to improve sample quality slightly. We also used random\nhorizontal ﬂips for all other datasets except LSUN Bedroom.\n•{v1149}31] and RMSProp early on in our experimentation process and chose the\nformer. We left the hyperparameters to their standard values. We set the learning rate to\n2{v1150}4 without any sweeping, and we lowered it to{v1151}5 for the{v1152}\nwhich seemed unstable to train with the larger learning rate.\n14\n\n\n•{v1153}\nthese values.\n•{v1154}\nthis value.\nFinal experiments were trained once and evaluated throughout training for sample quality. Sample\nquality scores and log likelihood are reported on the minimum FID value over the course of training.\nOn CIFAR10, we calculated Inception and FID scores on 50000 samples using the original code\nfrom the OpenAI [51] and TTUR [21] repositories, respectively. On LSUN, we calculated FID\nscores on 50000 samples using code from the StyleGAN2 [30] repository. CIFAR10 and CelebA-HQ\nwere loaded as provided by TensorFlow Datasets (https://www.tensorflow.org/datasets),\nand LSUN was prepared using code from StyleGAN. Dataset splits (or lack thereof) are standard\nfrom the papers that introduced their usage in a generative modeling context. All details can be found\nin the source code release.\nC\nDiscussion on related work\nOur model architecture, forward process deﬁnition, and prior differ from NCSN [55,{v1155}] in subtle but\nimportant ways that improve sample quality, and, notably, we directly train our sampler as a latent\nvariable model rather than adding it after training post-hoc. In greater detail:\n1.{v1156}\ncondition all layers on{v1157}\nthan only in normalization layers (NCSNv1) or only at the output (v2).\n2.{v1158}1{v1159}\nso that variance does not grow when adding noise, thus providing consistently scaled inputs\nto the neural net reverse process. NCSN omits this scaling factor.\n3.{v1160}KL({v1161}({v1162}0){v1163}({v1164})){v1165}0), ensur-\ning a close match between the prior and aggregate posterior of{v1166}\n{v1167}\nwith conditional Gaussians. Both of these factors prevent distribution shift when sampling.\n4.{v1168}\norously from{v1169}\nsampler to match the data distribution after{v1170}\nmodel using variational inference. In contrast, NCSN’s sampler coefﬁcients are set by hand\npost-hoc, and their training procedure is not guaranteed to directly optimize a quality metric\nof their sampler.\nD\nSamples\nAdditional samples\nFigure 11, 13, 16, 17, 18, and 19 show uncurated samples from the diffusion\nmodels trained on CelebA-HQ, CIFAR10 and LSUN datasets.\nLatent structure and reverse process stochasticity\nDuring sampling, both the prior{v1171}\n{v1172}({v1173}){v1174}\nof noise, we sampled multiple images conditioned on the same intermediate latent for the CelebA\n256{v1175}0{v1176}({v1177}0{v1178}){v1179}\nshare the latent{v1180}1000{v1181}. To accomplish this, we run a single reverse chain\nfrom an initial draw from the prior. At the intermediate timesteps, the chain is split to sample multiple\nimages. When the chain is split after the prior draw at{v1182}, the samples differ signiﬁcantly.\nHowever, when the chain is split after more steps, samples share high-level attributes like gender,\nhair color, eyewear, saturation, pose and facial expression. This indicates that intermediate latents\nlike{v1183}750{v1184}\nCoarse-to-ﬁne interpolation\nFigure 9 shows interpolations between a pair of source CelebA\n256{v1185}\nIncreasing the number of diffusion steps destroys more structure in the source images, which the\n15\n\n\nmodel completes during the reverse process. This allows us to interpolate at both ﬁne granularities\nand coarse granularities. In the limiting case of{v1186}\nimages in pixel space. On the other hand, after{v1187}\ninterpolations are novel samples.\nSource Rec.{v1188}\nRec. Source]",
  "第10章 steps": "[章节内容长度: 1068字符。Figure 9: Coarse-to-ﬁne interpolations that vary the number of diffusion steps prior to latent mixing.\n0\n200\n400\n600\n800 1{v1189}000\n2\n4\n6\n8\n10\nReverse process steps ({v1190})\nInception Score\n0\n200\n400\n600\n800 1{v1191}000\n0\n100\n200\n300\nReverse process steps ({v1192})\nFID\nFigure 10: Unconditional CIFAR10 progressive sampling quality over time\n16\n\n\nFigure 11: CelebA-HQ{v1193}\n17\n\n\n(a) Pixel space nearest neighbors\n(b) Inception feature space nearest neighbors\nFigure 12: CelebA-HQ{v1194}\nfaces. Generated samples are in the leftmost column, and training set nearest neighbors are in the\nremaining columns.\n18\n\n\nFigure 13: Unconditional CIFAR10 generated samples\n19\n\n\nFigure 14: Unconditional CIFAR10 progressive generation\n20\n\n\n(a) Pixel space nearest neighbors\n(b) Inception feature space nearest neighbors\nFigure 15: Unconditional CIFAR10 nearest neighbors. Generated samples are in the leftmost column,\nand training set nearest neighbors are in the remaining columns.\n21\n\n\n{v1195}7{v1196}89\n22\n\n\n{v1197}4{v1198}90\n23\n\n\n{v1199}6{v1200}36\n24\n\n\n{v1201}19{v1202}75\n25]"
}